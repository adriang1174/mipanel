
package Apache::AxKit::Language::XSP::ROOT::home::httpd::zonasegura_2egrupoalternativa_2ecom::html::cuenta::serviciosonline_2exsp;
use Apache;
use Apache::Constants qw(:common);
use XML::LibXML;
Apache::AxKit::Language::XSP::Page->import( qw(__mk_text_node __mk_comment_node __mk_ns_element_node __mk_element_node) );
#initialize xsp namespace
use Apache::AxKit::Plugin::Session;
use Time::Piece;
# Evil hack to globally prepare a session object. Actually, it is quite waterproof...
my $session;
{ my $handler = \&xml_generator;
*xml_generator = sub { $session = Apache->request->pnotes("SESSION"); goto $handler; }; }

#initialize xsp namespace



my $PAGE_SIZE = 25;
my %args = $r->args;
my $cliente = $r->pnotes('cliente');
my $if = $r->pnotes('if');
my $pagina = $args{'pagina'} || 1;
my $cuentas = $cliente->serviciosOnLine;


@Apache::AxKit::Language::XSP::ROOT::home::httpd::zonasegura_2egrupoalternativa_2ecom::html::cuenta::serviciosonline_2exsp::ISA = ('Apache::AxKit::Language::XSP::Page');
sub xml_generator {
my $class = shift;
my ($r, $cgi, $document, $parent) = @_;

$parent = __mk_element_node($document, $parent, q|ca|);
$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|1|);
$parent->setAttribute(q|href|,q|serviciosonline.xsp|);
__mk_text_node($document, $parent, q|Pedido de CallBack|);
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|xsl-template|);
__mk_text_node($document, $parent, q|serviciosonline|);
$parent = $parent->getParentNode;

$parent = __mk_element_node($document, $parent, q|if|);
__mk_text_node($document, $parent, "" . do {$if}); # non xsp tag
$parent = $parent->getParentNode;

if (${\{$r->args}}->{delay} ne '' and ${\{$r->args}}->{servicio} ne '' and ${\{$r->args}}->{login} ne '') {
		
	my $CallBack = {'servicio'=>${\{$r->args}}->{servicio},'cuenta'=>${\{$r->args}}->{login},'minutos'=>${\{$r->args}}->{delay}}; 
	my $flagCallBack = $cliente->generarCallBack($CallBack);
	
	if ($flagCallBack) {
        	$parent = __mk_element_node($document, $parent, q|form|);
$parent->setAttribute(q|id|,q|listado|);
$parent = __mk_element_node($document, $parent, q|delay|);
__mk_text_node($document, $parent, "" . do {${\{$r->args}}->{delay}}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|servicio|);
__mk_text_node($document, $parent, "" . do {${\{$r->args}}->{servicio}}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|login|);
__mk_text_node($document, $parent, "" . do {${\{$r->args}}->{login}}); # non xsp tag
$parent = $parent->getParentNode;
$parent = $parent->getParentNode;

	}
	else {
		$parent = __mk_element_node($document, $parent, q|form|);
$parent->setAttribute(q|id|,q|errorEnCallBack|);
$parent = $parent->getParentNode;

	}
}else {
{# start include-uri
my ($_uri);$_uri = q|axkit:includes/mostrar_cliente.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}
__mk_text_node($document, $parent, "" . do {{ my %_args = ();; Apache::AxKit::Language::XSP::TaglibHelper::handle_result('botonera():listtag=botonera:itemtag=opcion', undef(), 0, $document, $parent, CA::BaseTaglib::botonera());}
}); # non xsp tag



	if (scalar(@$cuentas) == 0) {
		# No tiene cuentas habilitadas, por lo tanto no puede
		# consultar serviciosOnLine
		$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|No tiene cuentas habilitadas con Servicios onLine.|);
$parent = $parent->getParentNode;

	} else {
		my $cuenta; # La cuenta cuyas tarifas se van a consultar
		# Debe elegir una

		if ($args{cuenta}) {
			my ($servicio, $login) = split(/_/, $args{cuenta});
			if (defined($servicio) and defined($login)) {
				$cuenta = CA::Cuenta->buscarPorClienteIdServicioLogin($cliente->cliente_id, $servicio, $login);
				warn "cuenta inexistente $servicio/$login\n" unless(defined($cuenta));
			}
		}

		if ((not defined($cuenta)) and (scalar(@$cuentas) > 1)) {
			# Form para elegir una cuenta
			$parent = __mk_element_node($document, $parent, q|form|);
$parent->setAttribute(q|id|,q|serviciosOnLineListar|);
$parent = __mk_element_node($document, $parent, q|cuenta|);
__mk_text_node($document, $parent, "" . do {$args{cuenta}}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|action|);
__mk_text_node($document, $parent, "" . do {$r->uri}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|cuentas|);

				my $idform;
				foreach my $cuenta (@$cuentas) {
				
					$idform++;
					$parent = __mk_element_node($document, $parent, q|cuenta|);
$parent = __mk_element_node($document, $parent, q|servicio|);
{ #start charset-convert
  my $charconv = Apache::AxKit::CharsetConv->new('iso-8859-1','utf-8');
  my $to_convert = '' . do {$cuenta->servicio};
__mk_text_node($document, $parent, "" . do {  $charconv->convert($to_convert);}); # non xsp tag
} # end of charset-convs
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|producto|);
{ #start charset-convert
  my $charconv = Apache::AxKit::CharsetConv->new('iso-8859-1','utf-8');
  my $to_convert = '' . do {$cuenta->producto};
__mk_text_node($document, $parent, "" . do {  $charconv->convert($to_convert);}); # non xsp tag
} # end of charset-convs
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|idform|);
__mk_text_node($document, $parent, "" . do {$idform}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|login|);
__mk_text_node($document, $parent, "" . do {$cuenta->login}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|id_cliprod|);
__mk_text_node($document, $parent, "" . do {$cuenta->id_cliprod}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|cliente_id|);
__mk_text_node($document, $parent, "" . do {$cuenta->cliente_id}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|solicitud|);
__mk_text_node($document, $parent, "" . do {$cuenta->solicitud}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|origen|);
__mk_text_node($document, $parent, "" . do {$cuenta->origen}); # non xsp tag
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|codigoplan|);
__mk_text_node($document, $parent, "" . do {$cuenta->codigoplan}); # non xsp tag
$parent = $parent->getParentNode;
$parent = $parent->getParentNode;

				}
				$parent = $parent->getParentNode;
$parent = $parent->getParentNode;

		}

	}
}

$parent = $parent->getParentNode;

	
return OK;
}
