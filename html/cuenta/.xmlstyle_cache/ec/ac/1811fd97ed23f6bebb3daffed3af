
package Apache::AxKit::Language::XSP::ROOT::home::httpd::zonasegura_2egrupoalternativa_2ecom::html::cuenta::centrocostos_2exsp;
use Apache;
use Apache::Constants qw(:common);
use XML::LibXML;
Apache::AxKit::Language::XSP::Page->import( qw(__mk_text_node __mk_comment_node __mk_ns_element_node __mk_element_node) );
#initialize xsp namespace
use Apache::AxKit::Plugin::Session;
use Time::Piece;
# Evil hack to globally prepare a session object. Actually, it is quite waterproof...
my $session;
{ my $handler = \&xml_generator;
*xml_generator = sub { $session = Apache->request->pnotes("SESSION"); goto $handler; }; }

#initialize xsp namespace



@Apache::AxKit::Language::XSP::ROOT::home::httpd::zonasegura_2egrupoalternativa_2ecom::html::cuenta::centrocostos_2exsp::ISA = ('Apache::AxKit::Language::XSP::Page');
sub xml_generator {
my $class = shift;
my ($r, $cgi, $document, $parent) = @_;

$parent = __mk_element_node($document, $parent, q|ca|);
$parent = __mk_element_node($document, $parent, q|xsl-template|);
__mk_text_node($document, $parent, q|centrocostos|);
$parent = $parent->getParentNode;
$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|1|);
$parent->setAttribute(q|href|,q|centrocostos.xsp|);
__mk_text_node($document, $parent, q|Centros de costos|);
$parent = $parent->getParentNode;
{# start include-uri
my ($_uri);$_uri = q|axkit:includes/mostrar_cliente.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}
__mk_text_node($document, $parent, "" . do {{ my %_args = ();; Apache::AxKit::Language::XSP::TaglibHelper::handle_result('botonera():listtag=botonera:itemtag=opcion', undef(), 0, $document, $parent, CA::BaseTaglib::botonera());}
}); # non xsp tag

my %args = $r->args;
my $if = $r->pnotes('if');
my $op = $args{'op'};
$op = 'l' if (not defined($op));
my $centrocosto;
my $cliente = $r->pnotes('cliente');

$parent = __mk_element_node($document, $parent, q|if|);
__mk_text_node($document, $parent, "" . do {$if}); # non xsp tag
$parent = $parent->getParentNode;

if ($op eq 'n') {
	$r->pnotes('vars', {});
	$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|2|);
__mk_text_node($document, $parent, q|Nuevo centro de costos|);
$parent = $parent->getParentNode;

	{# start include-uri
my ($_uri);$_uri = q|axkit:includes/form_agregar_centrocostos.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

} elsif ($op eq 'l') {
	my $centros = CA::CentroCosto->buscarPorClienteId($cliente->cliente_id);
	$r->pnotes('centroscosto', $centros);
	{# start include-uri
my ($_uri);$_uri = q|axkit:includes/listar_centroscosto.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

} elsif (($op eq 'b') or ($op eq 'm') or ($op eq 'e')) {
	if (not defined($args{linea})) {
		$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|Debe especificar un centro de costo.|);
$parent = $parent->getParentNode;

	} elsif ($args{linea} !~ /^[\d+()-]+$/) {
		$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|Número de teléfono inválido|);
$parent = $parent->getParentNode;
 
	} elsif (not defined($centrocosto = CA::CentroCosto->load($cliente->cliente_id, $args{linea}))) {
		$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|Centro de costo inexistente.|);
$parent = $parent->getParentNode;

	} elsif ($centrocosto->cliente_id != $cliente->cliente_id) {
		$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|Centro de costo inexistente.|);
$parent = $parent->getParentNode;

	} else {
		if ($op eq 'e') {
			$r->pnotes('centrocosto', $centrocosto);
			$r->pnotes('vars', {});
			$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|2|);
__mk_text_node($document, $parent, q|Edición|);
$parent = $parent->getParentNode;

			{# start include-uri
my ($_uri);$_uri = q|axkit:includes/form_editar_centrocostos.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

		} elsif ($op eq 'm') {
			# Si no vino el parametro centrocostos, se setea como no asignado
			# y se borra el centro.  En caso que venga algo, se modifica.
			my $errors = {};
			my %vars = $r->content;
			if ($vars{centrocostos}) {
				my $data = { centrocostos => $vars{centrocostos} };
				my $errores = $centrocosto->verificarModificar($data);
				if (not %$errores) {
					if ($centrocosto->modificar($data)) {
						$parent = __mk_element_node($document, $parent, q|mensaje|);
$parent->setAttribute(q|tipo|,q|ok|);
__mk_text_node($document, $parent, q|El centro de costos fue modificado.|);
$parent = $parent->getParentNode;

					} else {
						$parent = __mk_element_node($document, $parent, q|error|);
$parent->setAttribute(q|tipo|,q|interno|);
__mk_text_node($document, $parent, q|Ocurrió un error al modificar el centro de costos.|);
$parent = $parent->getParentNode;

					}
					my $centros = CA::CentroCosto->buscarPorClienteId($cliente->cliente_id);
					$r->pnotes('centroscosto', $centros);
					{# start include-uri
my ($_uri);$_uri = q|axkit:includes/listar_centroscosto.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

				} else {
					$r->pnotes('errores', $errores);
					$r->pnotes('vars', \%vars);
					$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|2|);
__mk_text_node($document, $parent, q|Edición|);
$parent = $parent->getParentNode;

					{# start include-uri
my ($_uri);$_uri = q|axkit:includes/form_editar_centrocostos.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

				}
			} else {
				# borrarlo
				if ($centrocosto->borrar) {
					$parent = __mk_element_node($document, $parent, q|mensaje|);
$parent->setAttribute(q|tipo|,q|ok|);
__mk_text_node($document, $parent, q|El centro de costos fue borrado.|);
$parent = $parent->getParentNode;

				} else {
					$parent = __mk_element_node($document, $parent, q|error|);
$parent->setAttribute(q|tipo|,q|interno|);
__mk_text_node($document, $parent, q|Ocurrió un error al borrar el centro de costos.|);
$parent = $parent->getParentNode;

				}
				my $centros = CA::CentroCosto->buscarPorClienteId($cliente->cliente_id);
				$r->pnotes('centroscosto', $centros);
				{# start include-uri
my ($_uri);$_uri = q|axkit:includes/listar_centroscosto.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

			}
		} elsif ($op eq 'b') {
			if ($centrocosto->borrar) {
				$parent = __mk_element_node($document, $parent, q|mensaje|);
$parent->setAttribute(q|tipo|,q|ok|);
__mk_text_node($document, $parent, q|El centro de costos fue borrado.|);
$parent = $parent->getParentNode;

			} else {
				$parent = __mk_element_node($document, $parent, q|error|);
$parent->setAttribute(q|tipo|,q|interno|);
__mk_text_node($document, $parent, q|Ocurrió un error al borrar el centro de costos.|);
$parent = $parent->getParentNode;

			}
			my $centros = CA::CentroCosto->buscarPorClienteId($cliente->cliente_id);
			$r->pnotes('centroscosto', $centros);
			{# start include-uri
my ($_uri);$_uri = q|axkit:includes/listar_centroscosto.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

		}
	}
} elsif ($op eq 'a') {
	my $errores = {};
	my %vars = $r->content;

	# Parsar todos los pares enviados y guardarlos en la variable @centros
	my @centros;
	foreach my $key (grep /^linea_\d+$/, keys %vars) {
		my ($text, $id) = split(/_/, $key);
		my $linea = $vars{$key};
		my $centro = $vars{'centrocostos_' . $id};
		
		if ($centro) {
			my $data = {
				cliente_id => $cliente->cliente_id,
				linea => $linea,
				centrocostos => $centro
			};
			push(@centros, $data);
		}
	}

	# Verificar errores
	my @errores;
	my $total_errores = 0;
	foreach my $data (@centros) {
		my $err = CA::CentroCosto->verificarAgregar($data);
		push(@errores, $err);
		if (%$err) { 
			$total_errores++;
		}
	}
	if ($total_errores == 0) {
		# Agregar los centros
		foreach my $data (@centros) {
			if (not defined(my $centrocosto = CA::CentroCosto->agregar($data))) {
				$total_errores++;
			}
		}

		if ($total_errores == 0) {
			$parent = __mk_element_node($document, $parent, q|mensaje|);
$parent->setAttribute(q|tipo|,q|ok|);
__mk_text_node($document, $parent, q|El centro de costos fue agregado.|);
$parent = $parent->getParentNode;

		} else {
			$parent = __mk_element_node($document, $parent, q|error|);
$parent->setAttribute(q|tipo|,q|interno|);
__mk_text_node($document, $parent, q|Ocurrió un error al agregar el centro de costos.|);
$parent = $parent->getParentNode;

		}
		my $centros = CA::CentroCosto->buscarPorClienteId($cliente->cliente_id);
		$r->pnotes('centroscosto', $centros);
		{# start include-uri
my ($_uri);$_uri = q|axkit:includes/listar_centroscosto.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

	} else {
		$r->pnotes('errores', \@errores);
		$r->pnotes('vars', \%vars);
		$parent = __mk_element_node($document, $parent, q|title|);
$parent->setAttribute(q|id|,q|2|);
__mk_text_node($document, $parent, q|Nuevo centro de costos|);
$parent = $parent->getParentNode;

		{# start include-uri
my ($_uri);$_uri = q|axkit:includes/form_agregar_centrocostos.exsp|;;
AxKit::XSP::Util::include_uri(
$document, $parent, $_uri);}

	}
} else {
	$parent = __mk_element_node($document, $parent, q|error|);
__mk_text_node($document, $parent, q|Operación desconocida|);
$parent = $parent->getParentNode;

}
$parent = $parent->getParentNode;

return OK;
}
